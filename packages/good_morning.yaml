################################################################
## Packages / Good Morning
################################################################
homeassistant:
  customize:
    script.good_morning:
      emulated_hue_hidden: false
      emulated_hue_name: "Good Morning"
      friendly_name: Good Morning
      icon: mdi:emoticon-poop

google_assistant:
  entity_config:
    script.good_morning:
      expose: true
      alias: 'Good Morning'
      name: 'Good Morning'
      type: script

sensor:
  - platform: rest
    name: quote_of_the_day
    resource: http://api.forismatic.com/api/1.0/?method=getQuote&format=json&lang=en
    value_template: '{{ value_json.quoteText }}'
    scan_interval: 86400

script:
  good_morning:
    sequence:
    - condition: time
      after: '06:00:00'
      before: '13:00:00'
    - service_template: >
        {% if is_state_attr('light.hallway2', 'brightness', 3) %}
          light.turn_off
        {% endif %}
      data:
        entity_id:
          light.hallway:
    - service: script.morning_livingroom_lights
    - service: switch.turn_off
      entity_id: switch.bedroom_fan
    - service: homeassistant.turn_off
      entity_id: input_boolean.finn_sleep
  # - service: script.auto_cartoons ## kodi leia will not allow me to play smart playlists yet.
    - service: switch.turn_on
      entity_id: switch.living_room_pc
    - service: media_player.media_Stop
      entity_id: media_player.kodi_bedroom_pi
    - service: media_player.volume_set
      data:
        entity_id: media_player.google_home
        volume_level: '0.70'
    - wait_template: "{{ states.sensor.living_room_motion.state == 'True' }}"
    - service: script.good_morning_tts

  good_morning_tts:
    sequence:
     - service: script.janet_speech_engine
       data_template:
         CustomMessage: >-
           {% set weather = states('sensor.weather_report') %}
           {%- if states.sensor.holiday_data.state != "" -%}
           Today is {{ states.sensor.holiday.state }},
           {%- else -%}
           Good Morning,
           {%- endif -%}
           {{weather}}
           {%- if as_timestamp(now())|timestamp_custom('%A %B %d', True) == states.sensor.waste_pickup_garbage_recycling.state -%}
           The garbage is to go out this evening.
           {%-else-%}
           {{' '}}The next garbage pickup is on {{states('sensor.waste_pickup_garbage_recycling')}}.{{' '}}
           {%-endif-%}
           {%- if is_state('sensor.nicole', 'not_home') -%}
           {% elif is_state('sensor.nicole', 'home') %}
             {% if is_state('binary_sensor.workday_sensor', 'off') %}
             {% elif is_state('binary_sensor.workday_sensor', 'on') %}
               {% if 'rain' in states.sensor.dark_sky_hourly_summary.state %}
               Don't forget your Umbrella.
               {% else %}
               {% endif %}
               {% endif %}
               {%- endif -%}
               {{ states.sensor.quote_of_the_day.state  }}

  morning_livingroom_lights:
    sequence:
    - condition: or
      conditions:
        - condition: state
          entity_id: 'sun.sun'
          state: 'below_horizon'
        - condition: state
          entity_id: 'sensor.dark_sky_summary'
          state: 'Cloudy'
        - condition: state
          entity_id: 'sensor.dark_sky_summary'
          state: 'Mostly Cloudy'
        - condition: state
          entity_id: 'sensor.dark_sky_summary'
          state: 'Overcast'
        - condition: state
          entity_id: 'sensor.dark_sky_summary'
          state: 'Breezy and Overcast'
        - condition: state
          entity_id: 'sensor.dark_sky_summary'
          state: 'Humid and Overcast'
        - condition: state
          entity_id: 'sensor.dark_sky_summary'
          state: 'Rain'
        - condition: state
          entity_id: 'sensor.dark_sky_summary'
          state: 'Heavy Rain'
        - condition: state
          entity_id: 'sensor.dark_sky_summary'
          state: 'Light Rain'
    - service: script.lr_concentrate
